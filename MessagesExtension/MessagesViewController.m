//
//  MessagesViewController.m
//  MessagesExtension
//
//  Created by Ty Rocca on 11/12/16.
//  Copyright Â© 2016 Ty Rocca. All rights reserved.
//

#import "MessagesViewController.h"
#import "RCTRootView.h"

@interface MessagesViewController ()

@end

@implementation MessagesViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - Conversation Handling

-(void)didBecomeActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the inactive to active state.
    // This will happen when the extension is about to present UI.

    // Use this method to configure the extension and restore previously stored state.
}

-(void)willResignActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the active to inactive state.
    // This will happen when the user dissmises the extension, changes to a different
    // conversation or quits Messages.

    // Use this method to release shared resources, save user data, invalidate timers,
    // and store enough state information to restore your extension to its current state
    // in case it is terminated later.
}

-(void)didReceiveMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when a message arrives that was generated by another instance of this
    // extension on a remote device.

    // Use this method to trigger UI updates in response to the message.
}

-(void)didStartSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user taps the send button.
}

-(void)didCancelSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user deletes the message without sending it.

    // Use this to clean up state related to the deleted message.
}

-(void)didTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called after the extension transitions to a new presentation style.

    // Use this method to finalize any behaviors associated with the change in presentation style.
}
-(void) willBecomeActiveWithConversation:(MSConversation*)conversation {
    [super willBecomeActiveWithConversation:conversation];
    [self presentReactNativeView:self.presentationStyle];
}
-(void) willTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
  [self presentReactNativeView:presentationStyle];
}
-(void) presentReactNativeView:(MSMessagesAppPresentationStyle)presentationStyle {
    // If you need you can pass the presentation style to your view
    RCTRootView *rootView = [
      [RCTRootView alloc] initWithBridge:[self getBridge]
        moduleName: @"AmazingMessageExtension"
        initialProperties: @{
          @"presentationStyle": @(presentationStyle),
        }
    ];
    UIViewController *vc = [UIViewController new];
    vc.view = rootView;
    for (UIViewController* cc in self.childViewControllers) {
      [cc willMoveToParentViewController:nil];
      [cc.view removeFromSuperview];
      [cc removeFromParentViewController];
    }
    [self addChildViewController:vc];
    vc.view.frame = self.view.bounds;
    [self.view addSubview:vc.view];
    [vc didMoveToParentViewController:self];
}
-(RCTBridge*) getBridge {
  static dispatch_once_t once;
  static id bridge;
  dispatch_once(&once, ^{
    NSURL *jsCodeLocation;
#if DEBUG
    jsCodeLocation = [NSURL URLWithString:@"http://localhost:8081/index.ios.bundle?platform=ios&dev=true"];
#else
    jsCodeLocation = [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];
#endif
    bridge = [
      [RCTBridge alloc] initWithBundleURL:jsCodeLocation
        moduleProvider:nil
        launchOptions:nil
    ];
  });
  return bridge;
}
@end
